module pybase (*)

type py Real = "float"
type py Int = "int"
type py Str = "str"
type py Bool = "bool"
type py Unit = "None"
type py (List a) = "list" a
type py (Tuple2 a b) = "tuple" a b
type py (Tuple3 a b c) = "tuple" a b c
type py (Tuple4 a b c d) = "tuple" a b c d
type py (Tuple5 a b c d e) = "tuple" a b c d e

import conventions

source py from "core.py"
 ( "mlc_run" as run
 , "mlc_id" as id
 , "mlc_at" as at
 , "mlc_map" as map
 , "mlc_map" as zipWith
 , "mlc_filter" as filter
 , "mlc_fold" as fold
 , "mlc_enumerateWith" as enumerateWith
 , "mlc_add" as add
 , "mlc_sub" as sub
 , "mlc_mul" as mul
 , "mlc_div" as div
 , "mlc_neg" as neg
 -- tuples
 , "mlc_fst" as fst
 , "mlc_snd" as snd
 , "mlc_fst" as fst3 -- same as fst in Python
 , "mlc_snd" as snd3 -- same as snd in Python
 , "mlc_thr3" as thr3
 -- new for case study
 , "mlc_onFst" as onFst
 , "mlc_concat" as concat
 , "mlc_sleep" as sleep
 , "mlc_shard" as shard
 , "mlc_join" as join
 -- maps
 , "mlc_filterKey" as filterKey
 , "mlc_filterVal" as filterVal
 -- comparators
 , "mlc_gt" as gt
 , "mlc_lt" as lt
 , "mlc_ge" as ge
 , "mlc_le" as le
 , "mlc_eq" as eq
 , "mlc_ne" as ne
 , "mlc_not" as not
 , "mlc_and" as and
 , "mlc_or" as or
 )

source py
 ( "len" as length
 , "len" as lengthS
 )


-------------------------------------------------------------------------------
--                 Pack and Unpack internal functions                          
-- These functions are used by morloc internally for (de)serialization of types
-- that cannot be automatically (de)serialized into/from JSON. They should not
-- be exported.
-------------------------------------------------------------------------------

source py from "data.py"
 ( "morloc_packMap" as packMap
 , "morloc_unpackMap" as unpackMap
 )

type py (Map key val) = "dict" key val

-- These do not need to be exported (and indeed should not be)
packMap :: pack => ([key],[val]) -> Map key val
packMap py :: pack => ([key],[val]) -> "dict" key val

unpackMap :: unpack => Map key val -> ([key],[val])
unpackMap py :: unpack => "dict" key val -> ([key],[val])
