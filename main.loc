module pybase

import conventions

source py from "core.py"
 ( "mlc_id" as id
 , "mlc_at" as at
 , "mlc_map" as map
 , "mlc_map" as zipWith
 , "mlc_fold" as fold
 , "mlc_enumerateWith" as enumerateWith
 , "mlc_add" as add
 , "mlc_sub" as sub
 , "mlc_mul" as mul
 , "mlc_div" as div
 , "mlc_neg" as neg
 -- tuples
 , "mlc_fst" as fst
 , "mlc_snd" as snd
 )

export id
export at
export map
export zipWith
export fold
export enumerateWith
export add
export sub
export mul
export div
export neg

export Real
export Int
export Str
export Bool

export fst
export snd

type py Real = "float"
type py Int = "int"
type py Str = "str"
type py Bool = "bool"

fst py :: (a, b) -> a
snd py :: (a, b) -> b

id py :: a -> a

at py :: Int -> [a] -> a

map py :: (a -> b) -> [a] -> [b]

zipWith py :: (a -> b -> c) -> [a] -> [b] -> [c]

fold py :: (b -> a -> b) -> b -> [a] -> b

enumerateWith py :: (a -> Int -> b) -> [a] -> [b]

add py :: Real -> Real -> Real

sub py :: Real -> Real -> Real

mul py :: Real -> Real -> Real

div py :: Real -> Real -> Real

neg py :: Real -> Real


-------------------------------------------------------------------------------
--                 Pack and Unpack internal functions                          
-- These functions are used by morloc internally for (de)serialization of types
-- that cannot be automatically (de)serialized into/from JSON. They should not
-- be exported.
-------------------------------------------------------------------------------

source py from "data.py"
 ( "morloc_packMap" as packMap
 , "morloc_unpackMap" as unpackMap
 )

export Map

type py (Map key val) = "dict" key val

-- These do not need to be exported (and indeed should not be)
packMap :: pack => ([key],[val]) -> Map key val
packMap py :: pack => ([key],[val]) -> "dict" key val

unpackMap :: unpack => Map key val -> ([key],[val])
unpackMap py :: unpack => "dict" key val -> ([key],[val])
